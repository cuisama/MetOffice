package com.weather.framework.workflow;

import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.persistence.Column;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;

import org.activiti.engine.repository.Deployment;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.task.Comment;
import org.activiti.engine.task.Task;

import com.sun.media.jfxmedia.Media;
import com.weather.xm.leavebill.dao.ILeaveBillDao;
import com.weather.xm.leavebill.dao.LeaveBillDaoImpl;
import com.weather.xm.leavebill.model.LeaveBill;

@SuppressWarnings("serial")
@Path("/WorkflowResource")
public class WorkflowResource {

	//private WorkflowBean workflowBean = new WorkflowBean();
	
	private IWorkflowService workflowService = new WorkflowServiceImpl();
	
	private ILeaveBillDao leaveBillDao = new LeaveBillDaoImpl();

	/**
	 * 查询部署对象信息，对应表（act_re_deployment）
	 * @return
	 */
	@Path("/getDeployment")
	@POST
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public List getDeployment(){
		List<Deployment> depList = workflowService.findDeploymentList();

		return depList;
	}
	
	/**
	 * 查询流程定义的信息，对应表（act_re_procdef）
	 * @return
	 */
	@Path("/getProcessDefinition")
	@POST
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public List getProcessDefinition(){
		List<ProcessDefinition> pdList = workflowService.findProcessDefinitionList();

		return pdList;
	}
	
	/**
	 * 发布流程
	 * @return
	 */
/*	public String newdeploy(){
		//获取页面传递的值
		//1：获取页面上传递的zip格式的文件，格式是File类型
		File file = workflowBean.getFile();
		//文件名称
		String filename = workflowBean.getFilename();
		//完成部署
		workflowService.saveNewDeploye(file,filename);
		return "list";
	}*/
	
	/**
	 * 删除部署信息
	 */
	@POST
	@Path("/delDeployment")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public String delDeployment(@FormParam("deploymentId") final String deploymentId){
		//1：获取部署对象ID
		//String deploymentId = workflowBean.getDeploymentId();
		//2：使用部署对象ID，删除流程定义
		workflowService.deleteProcessDefinitionByDeploymentId(deploymentId);
		return "list";
	}
	
	/**
	 * 查看流程图
	 * @throws Exception 
	 */
	@GET
	@Path("/bpmnViewImage")
	public String viewImage(@Context HttpServletResponse response,
			@QueryParam("deploymentId") String deploymentId,
			@QueryParam("imageName") String imageName) throws Exception{
		//1：获取页面传递的部署对象ID和资源图片名称
		//部署对象ID
		//String deploymentId = workflowBean.getDeploymentId();
		//资源图片名称
		//String imageName = workflowBean.getImageName();
		//2：获取资源文件表（act_ge_bytearray）中资源图片输入流InputStream
		InputStream in = workflowService.findImageInputStream(deploymentId,imageName);
		//3：从response对象获取输出流
		OutputStream out = response.getOutputStream();
		//4：将输入流中的数据读取出来，写到输出流中
		for(int b=-1;(b=in.read())!=-1;){
			out.write(b);
		}
		out.close();
		in.close();
		//将图写到页面上，用输出流写
		return null;
	}
	
	// 启动流程
	@Path("/startProcess")
	@POST
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public String startProcess(@FormParam("billId") final long billId,
			@FormParam("userId") final String userId) throws Exception{
		//更新请假状态，启动流程实例，让启动的流程实例关联业务
		WorkflowBean workflowBean = new WorkflowBean();
		workflowBean.setId(billId);
		workflowService.saveStartProcess(workflowBean,userId);
		return "listTask";
	}
	
	
	
	/**
	 * 任务管理首页显示
	 * @return
	 */
	@Path("/listTask")
	@POST
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public List<Task> listTask(@FormParam("username") final String username){
		//使用当前用户名查询正在执行的任务表，获取当前任务的集合List<Task>
		List<Task> list = workflowService.findTaskListByName(username); 

		return list;
	}
	
	/**
	 * 打开任务表单
	 */
	@POST
	@Path("/viewTask")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public String viewTaskForm(@FormParam("taskId") String taskId){
		//任务ID
		//String taskId = workflowBean.getTaskId();
		//获取任务表单中任务节点的url连接
		String url = workflowService.findTaskFormKeyByTaskId(taskId);
		url += "?taskId="+taskId;
		return "viewTaskForm";
	}
	
	// 准备表单数据
	@POST
	@Path("/audit")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public String audit(@FormParam("taskId") final String taskId) throws NumberFormatException, Exception{
		//获取任务ID
		//String taskId = workflowBean.getTaskId();
		/**一：使用任务ID，查找请假单ID，从而获取请假单信息*/
		LeaveBill leaveBill = workflowService.findLeaveBillByTaskId(taskId);
		//ValueContext.putValueStack(leaveBill);
		/**二：已知任务ID，查询ProcessDefinitionEntiy对象，从而获取当前任务完成之后的连线名称，并放置到List<String>集合中*/
		List<String> outcomeList = workflowService.findOutComeListByTaskId(taskId);
		//ValueContext.putValueContext("outcomeList", outcomeList);
		/**三：查询所有历史审核人的审核信息，帮助当前人完成审核，返回List<Comment>*/
		List<Comment> commentList = workflowService.findCommentByTaskId(taskId);
		//ValueContext.putValueContext("commentList", commentList);
		return "taskForm";
	}
	
	/**
	 * 提交任务
	 * @throws Exception 
	 */
	@POST
	@Path("/submitTask")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public String submitTask(@FormParam("deploymentId") String deploymentId,
			@FormParam("userId") String userId) throws Exception{
		WorkflowBean workflowBean = new WorkflowBean();
		workflowBean.setDeploymentId(deploymentId);
		//TODO
		workflowService.saveSubmitTask(workflowBean, userId);
		return "listTask";
	}
	
	/**
	 * 查看当前流程图（查看当前活动节点，并使用红色的框标注）
	 */
	@POST
	@Path("/viewCurrentImage")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public Map viewCurrentImage(@FormParam("taskId") String taskId){
		//任务ID
		//String taskId = workflowBean.getTaskId();
		/**一：查看流程图*/
		//1：获取任务ID，获取任务对象，使用任务对象获取流程定义ID，查询流程定义对象
		ProcessDefinition pd = workflowService.findProcessDefinitionByTaskId(taskId);
		//workflowAction_viewImage?deploymentId=<s:property value='#deploymentId'/>&imageName=<s:property value='#imageName'/>
//		ValueContext.putValueContext("deploymentId", pd.getDeploymentId());
//		ValueContext.putValueContext("imageName", pd.getDiagramResourceName());
		/**二：查看当前活动，获取当期活动对应的坐标x,y,width,height，将4个值存放到Map<String,Object>中*/
		Map<String, Object> map = workflowService.findCoordingByTask(taskId);

		return map;
	}
	
	// 查看历史的批注信息
	@POST
	@Path("/viewHisComment")
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
	public List viewHisComment(@FormParam("id") Long id) throws Exception{
		//获取清单ID
		//Long id = workflowBean.getId();
		//1：使用请假单ID，查询请假单对象，将对象放置到栈顶，支持表单回显
		//LeaveBill leaveBill = leaveBillDao.findLeaveBillById(id);
		//2：使用请假单ID，查询历史的批注信息
		List<Comment> commentList = workflowService.findCommentByLeaveBillId(id);
		return commentList;
	}
}
